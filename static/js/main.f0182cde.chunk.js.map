{"version":3,"sources":["components/NavBar.tsx","components/grid.tsx","components/ConfigurationContent.tsx","components/Configuration.tsx","components/Templates.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","menuButton","marginRight","spacing","title","flexGrow","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","to","layoutTemplates","id","layout","x","y","w","h","static","ReactGridLayout","WidthProvider","RGL","ConfigurationContent","Paper","cols","rowHeight","width","isDraggable","gridData","map","index","key","data-grid","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","breadcrumb","padding","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","content","marginTop","contentShift","PersistentDrawerLeft","useTheme","React","useState","open","setOpen","CssBaseline","clsx","IconButton","aria-label","onClick","setTimeout","window","dispatchEvent","Event","edge","noWrap","style","Breadcrumbs","Link","href","Drawer","anchor","paper","direction","Divider","List","text","ListItem","button","ListItemIcon","ListItemText","primary","palette","secondary","Templates","Grid","container","item","xs","routes","path","exact","App","Boolean","location","hostname","match","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0182cde.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Layout Templates\r\n          </Typography>\r\n          <Button color=\"inherit\">\r\n            <Link to={'/new-layout'}>\r\n              Create new\r\n            </Link>\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","const layoutTemplates = [\r\n  {\r\n    id: 0,\r\n    layout: [\r\n      { x: 0, y: 0, w: 12, h: 2, static: true },\r\n      { x: 0, y: 2, w: 6, h: 4, static: true },\r\n      { x: 6, y: 2, w: 6, h: 4, static: true },\r\n      { x: 0, y: 6, w: 12, h: 5, static: true },\r\n      { x: 0, y: 11, w: 12, h: 2, static: true },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default layoutTemplates;\r\n","import React from \"react\";\r\nimport RGL, { WidthProvider } from \"react-grid-layout\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport gridData from \"./grid\";\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\nexport default function ConfigurationContent() {\r\n  return (\r\n    <Paper className=\"layout-content\">\r\n      <ReactGridLayout\r\n        className=\"layout\"\r\n        cols={12}\r\n        rowHeight={30}\r\n        width={1200}\r\n        isDraggable={false}\r\n      >\r\n        {gridData[0].layout.map((layout: any, index: number) => {\r\n          return (\r\n            <div key={index} data-grid={{ static: true, ...layout }}></div>\r\n          );\r\n        })}\r\n        {/* <div key=\"a\" data-grid={{ x: 0, y: 0, w: 6, h: 2, static: true }}></div>\r\n        <div key=\"b\" data-grid={{ x: 6, y: 2, w: 6, h: 2, static: true }}></div>\r\n        <div key=\"c\" data-grid={{ x: 1, y: 0, w: 3, h: 2, static: true }}></div>\r\n        <div key=\"d\" data-grid={{ x: 4, y: 0, w: 1, h: 2, static: true }}></div> */}\r\n      </ReactGridLayout>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  makeStyles,\r\n  useTheme,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LayoutContent from './ConfigurationContent'\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    appBar: {\r\n      transition: theme.transitions.create([\"margin\", \"width\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n      transition: theme.transitions.create([\"margin\", \"width\"], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    breadcrumb: {\r\n      position: \"fixed\",\r\n      padding: \"1.5rem\",\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"margin\", \"width\"], {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n      display: \"none\",\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n      justifyContent: \"flex-end\",\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      marginTop: \"3rem\",\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300)\r\n  };\r\n  \r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n    setTimeout(() => window.dispatchEvent(new Event('resize')), 300)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap style={{ flexGrow: 1 }}>\r\n            Current template 1\r\n          </Typography>\r\n          <Button color=\"inherit\">Save</Button>\r\n          <Button color=\"inherit\">Cancel</Button>\r\n          <Button color=\"inherit\">Delete</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Breadcrumbs\r\n        className={clsx(classes.breadcrumb, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n        aria-label=\"breadcrumb\"\r\n      >\r\n        <Link color=\"inherit\" href=\"/\">\r\n          Layouts\r\n        </Link>\r\n        <Typography color=\"textPrimary\">Current template</Typography>\r\n      </Breadcrumbs>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <h3 className=\"drawer-header-title\">Components</h3>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === \"ltr\" ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <LayoutContent />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport \"./Templates.scss\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: \"2rem\",\r\n    },\r\n    paper: {\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Templates() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs>\r\n          <Paper className=\"paper add-new-template\">\r\n            <Link to={\"/new-layout\"}>\r\n              <div>\r\n                <i className=\"material-icons\">add</i>\r\n                <div>Create new template</div>\r\n              </div>\r\n            </Link>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper className=\"paper\">xs</Paper>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper className=\"paper\">xs</Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs>\r\n          <Paper className=\"paper\">xs</Paper>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper className=\"paper\">xs=6</Paper>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Paper className=\"paper\">xs</Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport NavBar from \"./components/NavBar\";\r\nimport Configuration from \"./components/Configuration\";\r\nimport Templates from \"./components/Templates\";\r\n\r\nimport { Route, Switch, Redirect } from \"react-router\";\r\n\r\nlet routes = (\r\n  <Switch>\r\n    <Route path=\"/layout-config\">\r\n      <Configuration />\r\n    </Route>\r\n    <Route exact path=\"/change-layout\">\r\n      <Templates />\r\n    </Route>\r\n    <Route exact path=\"/\">\r\n      <Redirect to=\"/layout-config\" />\r\n    </Route>\r\n  </Switch>\r\n);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n      <div>{routes}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Router } from \"react-router\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}